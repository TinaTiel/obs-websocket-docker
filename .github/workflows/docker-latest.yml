name: Docker Image CI - Latest

on:
  push:
    branches: [ main ]
  schedule:
    # Once daily at midnight
    - cron:  '0 0 * * *'
  workflow_dispatch:

env:
  REGISTRY: tinatiel
  ARTIFACT: obswebsocket

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
    # Checkout the Repo
    - uses: actions/checkout@v2
    
    # Download the latest artifacts from Palakis
    - name: Download Palakis latest Ubuntu Build
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: main.yml # "CI Multiplatform Build"
        branch: master
        repo: Palakis/obs-websocket
        path: downloads
     
    # Extract the git hash info of the download
    - name: Extract prerelease info
      run: |
        input=$(ls -d downloads/*-Ubuntu64) && echo PRERELEASE=${input:10:7} >> $GITHUB_ENV
    - name: Set Tag
      run: |
        echo FINAL_TAG=$(date +%s).${PRERELEASE} >> $GITHUB_ENV

    - name: Display directory contents
      run: ls -R

    # Build and Test/Verify image
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
          driver-opts: network=host
    
    - name: Build and push to local registry
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: localhost:5000/${{ env.ARTIFACT }}:latest

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install Python Test Script Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install websocket-client

    - name: Verify the build runs
      run: |
        docker run -d -p 4444:4444 localhost:5000/${{ env.ARTIFACT }}:latest \
        && python ./verify_conn.py \
        && docker logs $(docker ps --filter="ancestor=tinatiel/obswebsocket" --latest --format="{{.ID}}") \
        && python ./verify_conn.py

    # Login to docker and push image
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.ARTIFACT }}:test

    # - name: Build and push
    #   id: docker_build
    #   uses: docker/build-push-action@v2
    #   with:
    #     context: .
    #     push: true
    #     tags: |
    #       ${{ env.REGISTRY }}/${{ env.ARTIFACT }}:latest
    #       ${{ env.REGISTRY }}/${{ env.ARTIFACT }}:${{ env.FINAL_TAG }}

    # # Verify Upload / Inspect Image     
    # - name: Inspect Uploaded Image
    #   run: |
    #     docker image inspect ${{ env.REGISTRY }}/${{ env.ARTIFACT }}:latest